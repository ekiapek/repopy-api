"""
Django settings for repopy project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import django_heroku
import dj_database_url
from decouple import config
from redisearch.client import Client

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+^chs(6v44g1qn4v!m^l)somff56xoie1ik4_$i5btbmn_ld*-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ENVIRONMENT = "live"

ALLOWED_HOSTS = ['localhost','127.0.0.1']


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    # 'rest_framework',
    'logic'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    # 'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8081",
    "http://127.0.0.1:8081",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

ROOT_URLCONF = 'repopy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'repopy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'sqlite3.db',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# STATIC_URL = '/static/'

# STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR,"web", "static"),
# ]

# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


#Constant Variables
RESPONSE_SUCCESS = "0"
RESPONSE_ERROR = "9"
NO_REPOSITORY_FOUND = "5"
REPO_BASE_PATH = "RepoPy/"
REPO_RAW_PATH = "raw-repositories/"
REPO_EXTRACTED_PATH = "repositories/"
APPEND_SLASH = True
# MEDIA_ROOT = os.path.join(os.path.expanduser("~"), REPO_BASE_PATH)
API_URL = "https://repopy.herokuapp.com/api/"
RESERVED_KEYWORDS = [":related-with",":parent-of",":child-of",":function",":in"]

#redis
REDISEARCH_HOST = '192.168.8.105'
REDISGRAPH_HOST = '192.168.8.105'
REDIS_PORT = 6379
import redis
REDISEARCH_INSTANCE = redis.Redis(host=REDISEARCH_HOST,port=REDIS_PORT, db=0,password="")
REDISGRAPH_INSTANCE = redis.Redis(host=REDISGRAPH_HOST,port=REDIS_PORT, db=0,password="")
REDISEARCH_CLIENT = None

#Cache
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(os.path.join(os.path.expanduser("~"), REPO_BASE_PATH),"cache"),
        'TIMEOUT': 900,
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    }
}

#GCP
USE_GCP = True
if ENVIRONMENT == 'dev' and not USE_GCP:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    
    # STATIC_ROOT = 'static/'
    # STATIC_URL = '/static/'
    
    MEDIA_ROOT = os.path.join(os.path.expanduser("~"), REPO_BASE_PATH)
    MEDIA_URL = os.path.join(os.path.expanduser("~"), REPO_BASE_PATH)
    
    # UPLOAD_ROOT = 'uploads/'
    
    # DOWNLOAD_URL = STATIC_URL + "media/downloads"
    # DOWNLOAD_ROOT = os.path.join(PROJECT_ROOT, "static/media/downloads")
# for prod environment
elif ENVIRONMENT == 'live' and USE_GCP: 
        
    DEFAULT_FILE_STORAGE = 'gcloud.GoogleCloudMediaFileStorage'
    # STATICFILES_STORAGE = 'gcloud.GoogleCloudStaticFileStorage'
    
    GS_PROJECT_ID = 'repopy-bucket' #config('GS_PROJECT_ID')
    # GS_STATIC_BUCKET_NAME = config('GS_STATIC_BUCKET_NAME')
    GS_MEDIA_BUCKET_NAME = 'repopy-bucket'#config('GS_MEDIA_BUCKET_NAME')  # same as STATIC BUCKET if using single bucket both for static and media
    
    # STATIC_URL = 'https://storage.googleapis.com/{}/'.format(GS_STATIC_BUCKET_NAME)
    # STATIC_ROOT = "static/"

    MEDIA_URL = 'https://storage.googleapis.com/{}/'.format(GS_MEDIA_BUCKET_NAME)
    MEDIA_ROOT = REPO_BASE_PATH
    
    # UPLOAD_ROOT = 'media/uploads/'
    
    # DOWNLOAD_ROOT = os.path.join(PROJECT_ROOT, "static/media/downloads")
    # DOWNLOAD_URL = STATIC_URL + "media/downloads"
django_heroku.settings(locals())